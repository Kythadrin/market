services:
  postgres:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin}
      POSTGRES_DB: ${POSTGRES_DB:-app}
    healthcheck:
      test: [ "CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-admin}" ]
      timeout: 5s
      retries: 5
      start_period: 60s
    ports:
      - ${POSTGRES_BACKEND_PORT:-54322}:5432
    volumes:
      - ./Backend/docker/db/data:/var/lib/postgresql/data:rw
    networks:
      - app-network

  php:
    image: php:8.3-fpm
    build:
      dockerfile: ./Backend/docker/php/Dockerfile
    ports:
      - ${VITE_PORT:-5174}:${VITE_PORT:-5174}
    volumes:
      - ./Backend:/var/www/market
    depends_on:
      - postgres
    networks:
      - app-network

  nginx:
    image: nginx:latest
    build:
      dockerfile: ./Backend/docker/nginx/Dockerfile
    ports:
      - 80
#     - 443
    volumes:
      - ./Backend/docker/nginx/nginx.conf:/etc/nginx/nginx.conf
#      - ./docker/nginx/ssl:/etc/ssl
      - ./Backend:/var/www/market
    depends_on:
      - postgres
      - php
    networks:
      - app-network
      - blockchain-network
      - bot-network

  blockchain:
    build:
      dockerfile: ./Blockchain/docker/Dockerfile
    ports:
      - ${BLOCKCHAIN_PORT:-8545}
    volumes:
      - ./Blockchain:/var/www/blockchain
      - /var/www/blockchain/node_modules
    environment:
      NODE_ENV: development
    networks:
      - blockchain-network

  bot:
    build:
      dockerfile: ./Bot/docker/Dockerfile
    restart: always
    environment:
      - NODE_ENV=development
    volumes:
      - ./Bot:/usr/src/bot
      - /usr/src/bot/node_modules
      - /usr/src/bot/dist
    expose:
      - ${BOT_PORT:-8082}
    networks:
      - bot-network

networks:
  app-network:
    driver: bridge
  blockchain-network:
    driver: bridge
  bot-network:
    driver: bridge
